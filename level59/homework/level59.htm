<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>3D Cube Collector Game</title>
    <style>
        body { margin: 0; overflow: hidden; }
        canvas { display: block; }
        #score { 
            position: absolute; 
            top: 10px; 
            left: 10px; 
            color: white; 
            font-family: Arial, sans-serif; 
            font-size: 24px; 
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
        #instructions {
            position: absolute;
            top: 40px;
            left: 10px;
            color: white;
            font-family: Arial, sans-serif;
            font-size: 16px;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
        }
    </style>
</head>
<body>
    <div id="score">Score: 0</div>
    <div id="instructions">Use WASD or Arrow Keys to move</div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Scene setup
        const scene = new THREE.Scene();
        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
        const renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);

        // Player (sphere)
        const playerGeometry = new THREE.SphereGeometry(0.5, 32, 32);
        const playerMaterial = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
        const player = new THREE.Mesh(playerGeometry, playerMaterial);
        scene.add(player);
        player.position.set(0, 0, 0);

        // Collectible cubes
        const cubes = [];
        const cubeGeometry = new THREE.BoxGeometry(0.4, 0.4, 0.4);
        const cubeMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });
        for (let i = 0; i < 10; i++) {
            const cube = new THREE.Mesh(cubeGeometry, cubeMaterial);
            cube.position.set(
                Math.random() * 20 - 10,
                Math.random() * 20 - 10,
                Math.random() * 20 - 10
            );
            scene.add(cube);
            cubes.push(cube);
        }

        // Lighting
        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);
        scene.add(ambientLight);
        const pointLight = new THREE.PointLight(0xffffff, 0.5);
        pointLight.position.set(10, 10, 10);
        scene.add(pointLight);

        // Camera position
        camera.position.z = 5;

        // Player movement
        const keys = {};
        document.addEventListener('keydown', (e) => keys[e.key] = true);
        document.addEventListener('keyup', (e) => keys[e.key] = false);

        // Score
        let score = 0;
        const scoreElement = document.getElementById('score');

        // Animation loop
        function animate() {
            requestAnimationFrame(animate);

            // Player movement
            const speed = 0.1;
            if (keys['ArrowUp'] || keys['w']) player.position.y += speed;
            if (keys['ArrowDown'] || keys['s']) player.position.y -= speed;
            if (keys['ArrowLeft'] || keys['a']) player.position.x -= speed;
            if (keys['ArrowRight'] || keys['d']) player.position.x += speed;

            // Rotate cubes
            cubes.forEach(cube => {
                cube.rotation.x += 0.01;
                cube.rotation.y += 0.01;

                // Check for collision
                const distance = player.position.distanceTo(cube.position);
                if (distance < 0.9) { // 0.5 (player radius) + 0.4 (cube size)
                    scene.remove(cube);
                    cubes.splice(cubes.indexOf(cube), 1);
                    score += 10;
                    scoreElement.textContent = `Score: ${score}`;

                    // Spawn new cube
                    const newCube = new THREE.Mesh(cubeGeometry, cubeMaterial);
                    newCube.position.set(
                        Math.random() * 20 - 10,
                        Math.random() * 20 - 10,
                        Math.random() * 20 - 10
                    );
                    scene.add(newCube);
                    cubes.push(newCube);
                }
            });

            // Camera follows player
            camera.position.set(player.position.x, player.position.y, player.position.z + 5);

            renderer.render(scene, camera);
        }
        animate();

        // Handle window resize
        window.addEventListener('resize', () => {
            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();
            renderer.setSize(window.innerWidth, window.innerHeight);
        });
    </script>
</body>
</html>